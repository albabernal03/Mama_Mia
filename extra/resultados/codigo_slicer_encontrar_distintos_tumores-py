import numpy as np
import slicer
import vtk

# Obtener el nodo de segmentación
try:
    segmentation_node = slicer.util.getNode("Segmentation")
except:
    # Si falla, selecciona el primer nodo de segmentación disponible
    segmentation_nodes = slicer.util.getNodesByClass("vtkMRMLSegmentationNode")
    if len(segmentation_nodes) > 0:
        segmentation_node = segmentation_nodes[0]
    else:
        print("Error: No se encontró ningún nodo de segmentación")
        exit()

# Verificar que tenemos un nodo de segmentación válido
if not segmentation_node:
    print("Error: No se encontró el nodo de segmentación")
    exit()

print(f"Usando segmentación: {segmentation_node.GetName()}")

# Obtener la segmentación
segmentation = segmentation_node.GetSegmentation()
num_segments = segmentation.GetNumberOfSegments()

print(f"Número de segmentos encontrados: {num_segments}")

# Crear un nodo de fiduciales para marcar los centros
fiducial_node = slicer.mrmlScene.AddNewNodeByClass("vtkMRMLMarkupsFiducialNode", "Centros_Segmentos")

# Función para saltar a la ubicación - compatible con diferentes versiones de Slicer
def jumpToLocation(x, y, z):
    try:
        # Intenta el método más reciente primero
        slicer.util.jumpToSlice(x, y, z)
    except:
        try:
            # Método alternativo para versiones anteriores
            slicer.app.applicationLogic().JumpSlicesToLocation(x, y, z)
        except:
            try:
                # Último recurso - ajustar las vistas manualmente
                red = slicer.app.layoutManager().sliceWidget("Red")
                yellow = slicer.app.layoutManager().sliceWidget("Yellow")
                green = slicer.app.layoutManager().sliceWidget("Green")
                
                if red and red.sliceLogic():
                    red.sliceLogic().JumpSliceByCentering(x, y, z)
                if yellow and yellow.sliceLogic():
                    yellow.sliceLogic().JumpSliceByCentering(x, y, z)
                if green and green.sliceLogic():
                    green.sliceLogic().JumpSliceByCentering(x, y, z)
            except:
                print("No se pudo saltar a la ubicación")

for i in range(num_segments):
    segmentID = segmentation.GetNthSegmentID(i)
    segment_name = segmentation.GetNthSegment(i).GetName()
    
    print(f"Procesando segmento: {segment_name} (ID: {segmentID})")
    
    # Exportar segmento a volumen temporal
    labelmap_node = slicer.mrmlScene.AddNewNodeByClass("vtkMRMLLabelMapVolumeNode")
    
    # Buscar un volumen de referencia
    master_volume = None
    try:
        # Intenta obtener el volumen de referencia de la segmentación
        master_volume = segmentation_node.GetNodeReference("masterVolume")
    except:
        pass
    
    if not master_volume:
        # Si no hay referencia, busca el primer volumen en la escena
        volume_nodes = slicer.util.getNodesByClass("vtkMRMLScalarVolumeNode")
        if len(volume_nodes) > 0:
            master_volume = volume_nodes[0]
    
    # Exportar segmento a labelmap
    try:
        if master_volume:
            slicer.modules.segmentations.logic().ExportSegmentsToLabelmapNode(
                segmentation_node, [segmentID], labelmap_node, master_volume)
        else:
            slicer.modules.segmentations.logic().ExportSegmentsToLabelmapNode(
                segmentation_node, [segmentID], labelmap_node)
        
        # Obtener array NumPy y calcular centro
        array = slicer.util.arrayFromVolume(labelmap_node)
        coords = np.argwhere(array > 0)
        
        if coords.size == 0:
            print(f"{segment_name}: está vacío.")
            slicer.mrmlScene.RemoveNode(labelmap_node)
            continue
            
        # Calcular centro de masa (en voxel space)
        center_voxel = coords.mean(axis=0)
        
        # Obtener matriz IJK to RAS
        ijkToRAS = vtk.vtkMatrix4x4()
        labelmap_node.GetIJKToRASMatrix(ijkToRAS)
        
        # Convertir centro a coordenadas RAS
        ijk = [float(center_voxel[2]), float(center_voxel[1]), float(center_voxel[0]), 1.0]
        ras = [0.0, 0.0, 0.0, 0.0]
        ijkToRAS.MultiplyPoint(ijk, ras)
        
        # Añadir un punto fiducial para marcar el centro
        # Usar el método más reciente (AddControlPoint) en lugar de AddFiducial
        try:
            fiducial_node.AddControlPoint(ras[0], ras[1], ras[2], f"Centro_{segment_name}")
        except:
            # Fallback al método antiguo si es necesario
            fiducial_node.AddFiducial(ras[0], ras[1], ras[2], f"Centro_{segment_name}")
        
        # Saltar a ese punto en las vistas
        jumpToLocation(ras[0], ras[1], ras[2])
        print(f"🧠 {segment_name}: centrado en {ras[:3]}")
        
        slicer.app.processEvents()
        input(f"🔎 Presiona ENTER para ir al siguiente (viendo: {segment_name})")
        
    except Exception as e:
        print(f"Error procesando segmento {segment_name}: {str(e)}")
    
    # Limpieza
    slicer.mrmlScene.RemoveNode(labelmap_node)

print("Proceso completado. Los centros de los segmentos han sido marcados.")